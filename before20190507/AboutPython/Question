1   协程 web服务器 多进程多线程 epoll 异步io libuv murdo网络库 并发  QPS TPS 这些有啥联系？
2   python go C++ web服务器  murdo leveldb  git docker qt  梅耶尔两本c++书 设计模式 unix环境高级编程
 不管哪门语言对mysql redis mongo的操作都是必须熟悉的  这些啥时候能搞完  所有的东西都必须有总结或者源码解析 不然没痕迹


第一个问题的解答:


看了
https://www.cnblogs.com/lojunren/p/3856290.html
https://blog.csdn.net/kisslotus/article/details/85109027#5__206
https://www.cnblogs.com/hanxiaoyu/p/5677677.html
看了这三篇文章


并发：一个时间段内，有几个程序在同一个 CPU 上运行，但是任意时刻只有一个程序在 CPU 上运行。
并行：在任意时刻点上，有多个程序同时运行在**多个 CPU **上。如果 CPU 有个四颗，那么并行最多只有四个。
基于以上，我们都说高并发，不说高并行。
同步：指代码调用 IO 操作时，必须等待 IO 操作完成才返回的调用方式。
异步：指代码调用 IO 操作时，不必等 IO 操作完成就返回的调用方式。
阻塞：指调用函数时，当前线程被挂起。
非阻塞：指调用函数时，当前线程不会被挂起，而是立即返回。
阻塞和非阻塞是说的函数调用的一种机制。


阻塞就是 用户程序系统调用进入内核态  用到recv这些可能阻塞的函数 就是这么简单
1 epoll select 也是阻塞的
2 epoll不是异步io
2 服务端程序使用epoll这些其实是多个进程处理上万个链接 至于怎么多进程要细致去处理了
服务端监听的fd收到了http get post请求头这些信息 然后返回数据就是这么简单
3 epoll文章有说适合于链接几十万活跃很少的？这是为啥 epoll到底有啥缺点
4 隐约感觉到最大的性能表现是 在epoll服务程序 多进程多线程处理请求时 再使用协程达到比
较好的服务毕竟每个进程/线程处理请求中可能会操作数据库等io操作 这时候异步io有参与？
我感觉要读 murdo web服务器源码 c协程原理 才能接待我第一个问题


最后：尼玛又看了很多网络的文章 关于服务器这一方面真的是单独成一个小领域的。
真几把折腾人需要经验与钻研和实战 不适合现在深入钻研


是不是要等到读完一个完整的c/c++web高性能服务器或者自己用murdo和http解析器写一个web服务器才能解答第一个问题
