# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#  Time             2018/9/5 8:07 PM                               
#  Author           purplecity                                       
#  Name             python_cookbook_7_12.py                                    
#  Description                                                    
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

# 你想要扩展函数中的某个闭包，允许它能访问和修改函数的内部变量。
# 通常来讲，闭包的内部变量对于外界来讲是完全隐藏的。 但是，你可以通过编写访问函数并将其作为函数属性绑定到闭包上来实现这个目的。
#闭包：如果在一个函数的内部定义了另一个函数，外部的我们叫他外函数，内部的我们叫他内函数。在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用。这样就构成了一个闭包。

#但是闭包是一种特殊情况，如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，就把这个临时变量绑定给了内部函数，然后自己再结束。


#使用闭包的过程中，一旦外函数被调用一次返回了内函数的引用，虽然每次调用内函数，是开启一个函数执行过后消亡，但是闭包变量实际上只有一份，每次开启内函数都在使用同一份闭包变量
# 在闭包内函数也是类似的情况。在内函数中想修改闭包变量（外函数绑定给内函数的局部变量）的时候：  在python3中，可以用nonlocal 关键字声明 一个变量， 表示这个变量不是局部变量空间的变量，需要向上一层变量空间找这个变量。

def sample():
    n=0

    def func(): print('n=',n)

    def get_n(): return n

    def set_n(value):
        nonlocal n
        n=value

    func.get_n=get_n
    func.set_n=set_n

    return func

f=sample()
f()
f.set_n(10)
f()
print(f.get_n())

